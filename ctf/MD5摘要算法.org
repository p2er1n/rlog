#+title: MD5摘要算法
#+author: Peerin
#+date: <2023-11-03 周五>

Message-Digest Algorithm 5

对任意长度的输入产生128位的消息摘要。

* 消息填充

填充消息使得消息在添加一个1和至少一个0之后的位数模512余448。

#+begin_src c

  type struct Bits {
    uint8_t *data;
    size_t bits_len;
  } Bits;

  Bits filling(Bits d){
    size_t needed_zeros = 448 - (d.bits_len+2) % 512 + 1;
    size_t new_bits_len = d.bits_len+1+needed_zeros;
    size_t needed_bytes = new_bits_len/8;
    uint8_t *new_data = (uint8_t *)malloc(sizeof(uint8_t)*needed_bytes);
    memset(new_data, 0, needed_bytes);
    memcpy(new_data, d.data, d.bits_len/8 + (d.bits_len%8==0?0:1));
    size_t last_byte_pos = d.bits_len/8;
    size_t the_1_pos = d.bits_len%8;
    new_data[last_byte_pos] |= 1 << the_1_pos;
    Bits dd;
    dd.data = new_data;
    dd.bits_len = new_bits_len;
    return dd;
  }
#+end_src

* 添加长度

附上64位的消息长度（填充前，如果超过取低64位）

#+begin_src c
  void append_len(Bits d, uint64_t bits_len){
    size_t new_bits_len = d.bits_len + 64;
    uint8_t *new_data = malloc(sizeof(uint8_t)*(new_bits_len/8));
    memcpy(new_data, d.data, d.bits_len/8);
    for(int i = 0;i < 8;++i){
      new_data[d.bits_len/8+i] = (uint8_t)(bits_len & ((uint64_t)0xff << (i*8))) >> (i*8);
    }
    free(d.data);
    d.data = new_data;
    d.bits_len = new_bits_len;
  }
#+end_src

* 初始化变量

四个32位变量A,B,C,D

#+begin_src c

  uint32_t A = 0x01234567;

  uint32_t B = 0x89abcdef;

  uint32_t C = 0xfedcba98;

  uint32_t D = 0x76543210;

#+end_src

即从0到f再回到0。

* 数据处理

对每512位数据，进行4轮操作，计算出变化之后的A,B,C,D再加到A,B,C,D上。

#+begin_src c
  uint32_t M[16];//输入数据经上述操作之后的每一个512位分组

  uint32_t a=A,b=B,c=C,d=D;

  #define F(X, Y, Z) (((X)&(Y))|((~(X))&(Z)))
  #define G(X, Y, Z) (((X)&(Z))|((~(Z))&(Y)))
  #define H(X, Y, Z) ((X)^(Y)^(Z))
  #define I(X, Y, Z) ((Y)^((X)|(~(Z))))

  #define FF(a, b, c, d, Mj, s, ti) ((a) = (b) + ((((a) + (F((b), (c), (d)) + (Mj) + (ti)) << (s)))
  #define GG(a, b, c, d, Mj, s, ti) ((a) = (b) + ((((a) + (G((b), (c), (d)) + (Mj) + (ti)) << (s)))
  #define HH(a, b, c, d, Mj, s, ti) ((a) = (b) + ((((a) + (H((b), (c), (d)) + (Mj) + (ti)) << (s)))
  #define II(a, b, c, d, Mj, s, ti) ((a) = (b) + ((((a) + (I((b), (c), (d)) + (Mj) + (ti)) << (s)))

  //一轮
  FF(a, b, c, d, M0, 7, 0xd76aa478);
  FF(d, a, b, c, M1, 12, 0xe8c7b756);
  FF(c, d, a, b, M2, 17, 0x242070db);
  FF(b, c, d, a, M3, 22, 0xc1bdceee);
  FF(a, b, c, d, M4, 7, 0xf57c0faf);
  FF(d, a, b, c, M5, 12, 0x4787c62a);
  FF(c, d, a, b, M6, 17, 0xa8304613);
  FF(b, c, d, a, M7, 22, 0xfd469501);
  FF(a, b, c, d, M8, 7, 0x698098d8);
  FF(d, a, b, c, M9, 12, 0x8b44f7af);
  FF(c, d, a, b, M10, 17, 0xffff5bb1);
  FF(b, c, d, a, M11, 22, 0x895cd7be);
  FF(a, b, c, d, M12, 7, 0x6b901122);
  FF(d, a, b, c, M13, 12, 0xfd987193);
  FF(c, d, a, b, M14, 17, 0xa679438e);
  FF(b, c, d, a, M15, 22, 0x49b40821);

  // 第二轮
  GG(a, b, c, d, M1, 5, 0xf61e2562);
  GG(d, a, b, c, M6, 9, 0xc040b340);
  GG(c, d, a, b, M11, 14, 0x265e5a51);
  GG(b, c, d, a, M0, 20, 0xe9b6c7aa);
  GG(a, b, c, d, M5, 5, 0xd62f105d);
  GG(d, a, b, c, M10, 9, 0x02441453);
  GG(c, d, a, b, M15, 14, 0xd8a1e681);
  GG(b, c, d, a, M4, 20, 0xe7d3fbc8);
  GG(a, b, c, d, M9, 5, 0x21e1cde6);
  GG(d, a, b, c, M14, 9, 0xc33707d6);
  GG(c, d, a, b, M3, 14, 0xf4d50d87);
  GG(b, c, d, a, M8, 20, 0x455a14ed);
  GG(a, b, c, d, M13, 5, 0xa9e3e905);
  GG(d, a, b, c, M2, 9, 0xfcefa3f8);
  GG(c, d, a, b, M7, 14, 0x676f02d9);
  GG(b, c, d, a, M12, 20, 0x8d2a4c8a);

  //第三轮
  HH(a, b, c, d, M5, 4, 0xfffa3942);
  HH(d, a, b, c, M8, 11, 0x8771f681);
  HH(c, d, a, b, M11, 16, 0x6d9d6122);
  HH(b, c, d, a, M14, 23, 0xfde5380c);
  HH(a, b, c, d, M1, 4, 0xa4beea44);
  HH(d, a, b, c, M4, 11, 0x4bdecfa9);
  HH(c, d, a, b, M7, 16, 0xf6bb4b60);
  HH(b, c, d, a, M10, 23, 0xbebfbc70);
  HH(a, b, c, d, M13, 4, 0x289b7ec6);
  HH(d, a, b, c, M0, 11, 0xeaa127fa);
  HH(c, d, a, b, M3, 16, 0xd4ef3085);
  HH(b, c, d, a, M6, 23, 0x04881d05);
  HH(a, b, c, d, M9, 4, 0xd9d4d039);
  HH(d, a, b, c, M12, 11, 0xe6db99e5);
  HH(c, d, a, b, M15, 16, 0x1fa27cf8);
  HH(b, c, d, a, M2, 23, 0xc4ac5665);

  //第四轮
  II(a, b, c, d, M0, 6, 0xf4292244);
  II(d, a, b, c, M7, 10, 0x432aff97);
  II(c, d, a, b, M14, 15, 0xab9423a7);
  II(b, c, d, a, M5, 21, 0xfc93a039);
  II(a, b, c, d, M12, 6, 0x655b59c3);
  II(d, a, b, c, M3, 10, 0x8f0ccc92);
  II(c, d, a, b, M10, 15, 0xffeff47d);
  II(b, c, d, a, M1, 21, 0x85845dd1);
  II(a, b, c, d, M8, 6, 0x6fa87e4f);
  II(d, a, b, c, M15, 10, 0xfe2ce6e0);
  II(c, d, a, b, M6, 15, 0xa3014314);
  II(b, c, d, a, M13, 21, 0x4e0811a1);
  II(a, b, c, d, M4, 6, 0xf7537e82);
  II(d, a, b, c, M11, 10, 0xbd3af235);
  II(c, d, a, b, M2, 15, 0x2ad7d2bb);
  II(b, c, d, a, M9, 21, 0xeb86d391);

  A+=a;
  B+=b;
  C+=c;
  D+=d;
#+end_src


* 输出

输出处理之后的A,B,C,D

#+begin_src c
  printf("%X%X%X%X",A,B,C,D);
#+end_src
