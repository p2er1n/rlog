#+title: AES和Blowfish
#+author: Peerin
#+date: <2023-10-27 周五>

* AES

Advanced Encryption Standard

是美国联邦政府甄选的标准，最终选择了Rijndael加密法，但是略有改变。

是区块加密（分组加密），明文数据是128位，密钥可以是128位、192位、256位，根据密钥长度不同，加密轮数不同。

128位的明文数据按照一定的格式排成一个4*4矩阵，每个元素是一个字节大小。

每轮经历这样的过程：
1. AddRoundKey
   矩阵中的每个字节都与 *本回合密钥* 做异或运算。
   每个回合的密钥是由根密钥根据密钥生成方案生成的。
2. SubBytes
   通过一个替换表进行字节替换
3. ShiftRows
   每个横行进行循环式位移
4. MixColumns（除最后一个回合），AddRoundKey（最后一个回合）
   一些数学运算

** AES key schedule 子密钥生成方案

以128位密钥为例，
#+ATTR_ORG: :width 100
[[file:./imgs/493px-AES-Key_Schedule_128-bit_key.svg.png]]
图中，RotWrod操作是对每个输入进行循环的位移，按照把最低位的字节旋转到最高位的顺序。
SubWord操作是对每个字节进行S-box替换。
Rcon是对每个输入（32位）异或上本轮的rcon常量。

#+begin_src c
  #include <stdlib.h>

  void add_round_key(uint8_t v[4][4], uint8_t k[4][4]){
    for(int i = 0;i < 4;++i)
      for(int j = 0;j < 4;++j)
	v[i][j] ^= k[i][j];
  }

  void sub_s_box(uint8_t v[4][4]){
    const uint8_t s_box[256] = {
      0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
      0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
      0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
      0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
      0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
      0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
      0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
      0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
      0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
      0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
      0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
      0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
      0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
      0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
      0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
      0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    };
    for(int i = 0;i < 4;++i)
      for(int j = 0;j < 4;++j)
	v[i][j] = s_box[v[i][j]];
  }

  void shift_rows(uint8_t v[4][4]){
    uint8_t tmp = v[1][0];
    for(int i = 0;i < 3;++i) v[1][i] = v[1][i+1];
    v[1][3] = tmp;

    uint8_t tmp2[2] = {v[2][0], v[2][1]};
    for(int i = 0;i < 2;++i) v[2][i] = v[2][i+2];
    for(in i = 2;i < 4;++i) v[2][i] = tmp2[i-2];

    uint8_t tmp3[3] = {v[3][0], v[3][1], v[3][2]};
    for(int i = 0;i < 1;++i) v[3][i] = v[3][i+3];
    for(in i = 1;i < 4;++i) v[3][i] = tmp3[i-1];
  }

  void mix_colums(uint8_t v[4][4]){
    uint8_t mix_array[4][4] = {
      0x02, 0x03, 0x01, 0x01,
      0x01, 0x02, 0x03, 0x01,
      0x01, 0x01, 0x02, 0x03,
      0x03, 0x01, 0x01, 0x02
    };
    uint8_t temp_array[4][4];
    memcpy(temp_array, v, 16);

    for(int i = 0;i < 4;++i)
      for(int j = 0;j < 4;++j)
	v[i][j] =
	  mix_array[i][0] * temp_array[0][j] +
	  mix_array[i][1] * temp_array[1][j] +
	  mix_array[i][2] * temp_array[2][j] +
	  mix_array[i][3] * temp_array[3][j];
  }

  void g_func(uint8_t *w[4]){
    //for(i, 0 .. 2)w[i]=w[i+1]; w[3] = old_w[0];
    //map(w, s_box)
    //w[0] ^ rcon[i]
  
  }

  void gen_sub_keys(uint8_t k[4][4], uint8_t sk[11][4][4]){
    //k[0] ^ g(k[3]) ^ k[1] ^ k[2] ^ k[3]
  
  }

  void encrypt(uint8_t v[4][4], uint8_t k[4][4]){
    
  }
#+end_src

* Blowfish

Blowfish也是分组加密，分组长度比较短，为64位，密钥长度可变，为32-448位。

#+begin_src c
  uint32_t P[18];
  uint32_t S[4][256];

  uint32_t f (uint32_t x) {
     uint32_t h = S[0][x >> 24] + S[1][x >> 16 & 0xff];
     return ( h ^ S[2][x >> 8 & 0xff] ) + S[3][x & 0xff];
  }

  void encrypt (uint32_t & L, uint32_t & R) {
     for (int i=0 ; i<16 ; i += 2) {
	L ^= P[i];
	R ^= f(L);
	R ^= P[i+1];
	L ^= f(R);
     }
     L ^= P[16];
     R ^= P[17];
     swap (L, R);
  }

  void decrypt (uint32_t & L, uint32_t & R) {
     for (int i=16 ; i > 0 ; i -= 2) {
	L ^= P[i+1];
	R ^= f(L);
	R ^= P[i];
	L ^= f(R);
     }
     L ^= P[1];
     R ^= P[0];
     swap (L, R);
  }

    // ...
    // initializing the P-array and S-boxes with values derived from pi; omitted in the example
    // ...
  {
     for (int i=0 ; i<18 ; ++i)
	P[i] ^= key[i % keylen];
     uint32_t L = 0, R = 0;
     for (int i=0 ; i<18 ; i+=2) {
	encrypt (L, R);
	P[i] = L; P[i+1] = R;
     }//这时候encrypt的时候，因为L，R都是0，因此f调用的结果都是0。
     for (int i=0 ; i<4 ; ++i)
	for (int j=0 ; j<256; j+=2) {
	   encrypt (L, R);
	   S[i][j] = L; S[i][j+1] = R;
	}
     //这时候同样，f的结果为0，但是这一步使用的P数组是上一步产生的。
  }
  //from wikipedia
#+end_src

* 对称密码的加密模式

** CBC 加密模式

Cipher Block Chaining

适用于分组加密，在加密每一个块的时候，应用初始块或者上一个加密之后的块和当前块异或之后再加密。

需要IV

*** IV

Initial Vector

即初始化向量，就是加密第一个快的时候用到的和当前块异或的初始块。

** ECB 加密模式

Electronic Codebook

块加密中比较简单的加密模式，每一块明文数据独立的生成加密块。

不需要IV

** CFB 加密模式

Cipher Feedback

需要IV

** OFB 加密模式

需要IV

