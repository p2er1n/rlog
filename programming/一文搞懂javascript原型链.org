#+title: 一文搞懂javascript原型链
#+author: Peerin
#+date: <2023-08-23 三 22:20>

* 构造函数

构造函数就是普通的函数对象，只不过被调用的方式不同，使用 *new* 关键字来调用构造函数。

这时，构造函数内部的 *this* 指向新实例化的对象，并且不需要显式返回this，不需要return即可。

如果有return,就按照return返回的对象来实例化。

** 缺点

如果一个对象内部有一个方法，每一个实例化的对象都会包含这个方法，并且都有这个函数对象的一份拷贝，这时不必要的。

* 原型继承

原型继承使得一个实例对象可以引用一种被叫做原型对象的对象的属性和方法。

原型对象也是对象，只不过被使用的方法不同。

#+ATTR_ORG: :width 80 :rotation 90
[[./imgs/js原型链.jpg]]

需要注意，实例化之后的对象和构造函数就没有关系了，实例化之后的对象的原型对象是构造函数prototype属性指向的原型对象。

实例化对象的原型链延伸到Object构造函数的prototype,这个原型对象的原型对象是null

你可能猜到了，猜不到也很正常，因为我没有严格按照介绍顺序来说，每个对象的__proto__特殊属性指向的是这个对象的原型对象。

其实这个属性只有在几个主流的浏览器实现，标准没有要求，而是要求一个内部不可访问的属性指向原型对象即可，但是这些浏览器提供了这个属性指向原型对象。

That's all!
