#+title: 探究js异步
#+author: Peerin
#+date: <2023-09-03 日 08:34>

* setTimeOut

用来设置定时事件，在指定时间之后，指定函数就会被加入到消息队列等待被执行，可以在被加入之前使用 *clearTimeOut* 函数取消加入。

* setInterval

设置定时器，以后，每指定时间都会在消息队列中加入指定函数，不需要的时候需要使用 *clearInterval* 取消定时器。

* Promise

** 基本

Promise 是一种对象， 用来表示异步事件。

Promise有三种状态：

1. 等待

2. 完成

3. 拒绝

使用Promise实例化一个Promise对象的时候需要传入一个函数，这个对象在同步线程中立即返回，但是Promise中的执行函数将被异步执行。

/实现方法猜测：同步线程中创建Promise对象，创建完毕后立即向消息队列放入执行函数，执行函数被执行后，根据执行函数的执行改变Promise对象的状态/

执行函数接受两个参数：resolve 和 reject 这是两个执行函数被执行时候被传入的函数参数，用来改变Promise对象的状态，他们接受一个参数，用来表示结果值（resolve）和错误（reject）

Promise对象的重要属性有两个，一个是状态，一个是对应的值。

1. 等待状态下没有对应的值

2. 完成状态下对应结果值

3. 拒绝状态下对应错误原因   

Promise对象的状态的改变是不可逆的，并且只能改变一次。

** Promise 链

接下来讲解Promise链条，Promise链条是一个一个Promise串联起来，一个一个执行的链条，但都是异步执行的。

Promise对象/类有几个用来支撑链条实现的函数:

1. then

2. catch

3. all

4. race   

其中all和race是Promise类的静态方法，用来合并多个Promise返回一个Promise。其他两个是对象方法，用在单个Promise对象上。

最常用的是then,它接受两个参数，分别是在Promise对象被解决时候调用的函数和被拒绝的时候调用的函数，都接受一个参数，是相应的值（结果值或者错误原因）。

并且这个函数默认返回一个新的Promise对象，这让Promise对象连成链条成为可能。

而catch函数只是then函数的语法糖，它只接受一个函数参数，是Promise对象被拒绝的时候执行的函数。

这两个函数如果被传入的函数显式返回了Promise对象，则then方法返回这个对象，否则，then方法包装一个空对象或者其他返回值为Promise对象并返回。

* 新关键字

新标准为了方便异步，提供了新的关键字: await 和 async

* async

它可以被用在函数声明、函数表达式和箭头函数的前端用来表明这个函数是一个异步函数。

异步函数内部可以使用await被中断，然后等待await的表达式被解决后，继续执行异步函数的剩余部分。

这样保证了异步函数内部的执行顺序，又不至于阻塞同步线程。

因为异步函数会被立即返回，同步线程不会被阻塞，异步函数返回一个Promise。

* await

它只能被用在异步函数内部，被使用后中断当前异步函数的执行，转而执行其后面的表达式，它应该是将后面的表达式包装成Promise再执行，所以这些都不会阻塞同步线程的执行。


