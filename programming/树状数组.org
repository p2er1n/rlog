#+title: 树状数组
#+author: Peerin
#+date: <Wed Sep 20 17:19:12 2023>

* tips

在c++语言中，负数的二进制表示是相应的正数的 *取反后再加一* 。

* 功能

** 单点修改

~a[i] = x;~

** 区间查询

~x = a[l..r];~

* 使用方法

~void update(int idx, int num);~

update函数更新与第idx个数相应的所有树状数组元素的值。

~int sum(int idx);~

根据树状数组快速求得原数组1-idx区间的数值之和。

* 管辖区间

** lowbit 函数

#+begin_src c++
int lowbit(int x) {
  // x 的二进制中，最低位的 1 以及后面所有 0 组成的数。
  // lowbit(0b01011000) == 0b00001000
  //          ~~~~^~~~
  // lowbit(0b01110010) == 0b00000010
  //          ~~~~~~^~
  return x & -x;
}
#+end_src

这个函数很巧妙，可以自己尝试几个数字就会明白了。

要求的最低位的1之前肯定都是0（==废话），所以转换为其负数的第一步取反之后，这些0就都变成1,而且最低位的1就变成了0

此时， *...1000*  => *...0111* 然后再加1之后就会进一位到原来的最低位1的地方，因此最低位1以及它之前的位就变成了正数时候的样子。

而其前面的位都变成了正数的相应位的反，这时候取和的话，前面都会变成0,而后面保持不变。就得到了最低位1以及其前面的位所表示的数字。

* 性质

1. 对于x<=y，要么有c[x]和c[y]不相交，要么有c[x]包含于c[y]
   
2. c[x]真包含于c[x + lowbit(x)]
   
3. 对于任意的x<y<lowbit(x)，有c[x]和c[y]不相交

* 函数实现

#+begin_src c++
  void update(int idx, int num){
    while(idx <= n){
      t[idx] += num;
      idx += lowbit(idx);
    }
  }
#+end_src

#+begin_src c++
  int sum(int x){
    int ans = 0;
    while(x > 0){
      ans += t[x];
      x -= lowbit(x);
    }
    return ans;
  }
#+end_src
